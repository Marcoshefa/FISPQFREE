Para cadastrar o nome de usuário
git config --local user.name "marcosfn"

----------------------------------------
Para cadastrar o email de usuário
git config --local user.email "marcoshefa@gmail.com"

--------------------------------
Para visualizar o nome cadastrado de usuário
git config user.name

------------------------------------
Para visualizar o email cadastrado de usuário
git config user.email

------------------------------------------------------
Comando para limpar a tela
clear

-------------------------------------------------------
Comando para voltar um pasta
cd ..
-------------------------------------------------------
Comando para voltar um pasta
cd local
EX: cd /c/Users/REMAKKER/Desktop/projeto-git

-----------------------------------------------
Comando para criar pasta

Escolher um local para criar a pasta
Ex: cd /c/Users/REMAKKER/Desktop/projeto-git

Digitar o comando mkdir
mkdir nome da pasta
Ex:mkdir marcos

--------------------------------------------------
Para identificar que uma pasta é um repositorio git
git init

(agora a pasta marcos é um repositório)
-----------------------------------------------
Para identificar se um pasta é um repositorio git
Acesse a pasta e digite o camando abaixo
git status

-----------------------------------------------
Ver histórico de alterações (commit)
git log

Para sair do git log
"q"
---------------------------------------------
Ver histórico de alterações em uma única linha
git log --online

----------------------------------------------
ver hstórico de alterações com detalhes
git log -p

----------------------------------------------
Abaixo o link para diversas formas de apresentação de commit
https://devhints.io/git-log

------------------------------------------------
Adicionar um pasta inteira de arquivos para serem commitados
git add .

----------------------------------------------
Adicionar somente uma pasta para serem commitados
git add nome da pasta
ex: index.html

----------------------------------------------
Criar um commit
git commit - m "criando arquivo index.html com lista de cursos"

----------------------------------------------------
Criando um arquivo para adicionar arquivos que queira que o git ignore
Criar o arquivo .gitignore.html e colocar o nome dos arquivo que quer que ele ignore.

---------------------------------------------------------
Alterar o nome do servidor
git remote rename nome do arquivo novo nome arquivo
ex: git remote rename origin local

-------------------------------------------------------------------
Comando para puxar um repositório para o servidor
git pull nome do servidor master
ex: git pull local master

--------------------------------------------------------------
Verificar o endereço do repositório
git remote -v

--------------------------------------------------------------
--------------------------------------------------------------
--------------------------------------------------------------
Criar uma pasta para usar somente o controle de versões
mkdir nome da pasta
Ex: mkdir servidor

  
  ds

--------------------------------------------------------------
Comando para criar um repositório que será utilizado como controle de versões
1- criar uma pasta que será utilizada como controle
2 - entrar dentro da pasta
git int --bare

------------------------------------------------------------------
Comando para criar um servidor remoto
git remote add Nome caminho

ex: git remote add local C:\Users\REMAKKER\Desktop\marcos\curso-git-e-github

-------------------------------------------------------
Comando para clonar repositório
Acessar a pasta do usuário
Ex: cd /c/Users/REMAKKER/Desktop/projeto-git/marcos

git clone endereço com repositorio nome do arquivo
ex: git clone /c/Users/REMAKKER/Desktop/projeto-git/servidor/ projeto
endereço do repositório = /c/Users/REMAKKER/Desktop/projeto-git/servidor/ se atentar para as barras
nome do arquivo = projeto

---------------------------------------------------------------
acessar a pasta do usuário que irá trabalhar de forma compartilhada
Ex: cd /c/Users/REMAKKER/Desktop/projeto-git/marcos

---------------------------------------------------------------------
acessar a pasta de trabalho
Ex: cd /c/Users/REMAKKER/Desktop/projeto-git

Criar a pasta para o usuário que irá trabalhar de forma compartilhada
mkdir no da pasta
Ex: mkdir beto

---------------------------------------------------------------------
Comando para clonar repositório
Acessar a pasta do usuário
Ex: cd /c/Users/REMAKKER/Desktop/projeto-git/marcos

git clone endereço com repositorio nome do arquivo
ex: git clone /c/Users/REMAKKER/Desktop/projeto-git/servidor/ projeto
endereço do repositório = /c/Users/REMAKKER/Desktop/projeto-git/servidor/ se atentar para as barras
nome do arquivo = projeto

----------------------------------------------------------------------
Alterar o nome do servidor
acessar a nova pasta criada
Ex: cd /c/users/remakker/desktop/projeto-git/beto/projeto

digitar o comando git remote
Ex: git remote

Visualizar o nome do arquivo
Ex: origin

Alterar o nome do arquivo
git remote rename nome do arquivo novo nome arquivo
ex: git remote rename origin local

----------------------------------------------------------------------
Usuário principal deve enviar o arquivo para o servidor

Acessar a pasta do usuário principal
Ex: cd /c/Users/REMAKKER/Desktop/projeto-git/marcos

Comando para enviar um repositório para o servidor
git push nome do servidor master
ex: git push local master

----------------------------------------------------------------------=
Usuário secundário deve puxar o arquivo para o servidor

Acessar a pasta do usuário principal
Ex: cd /c/Users/REMAKKER/Desktop/projeto-git/beto/projeto

Comando para enviar um repositório para o servidor
git pull nome do servidor master
ex: git pull local master

--------------------------------------------------------------
Após efetuarmos alteração no arquivo, devemos seguir os passos abaixo
O comando add serve para marcar o arquivo que será comitado

git add nome do arquivo
Ex: git add . index.html

git commit -m "colocar a alteração"
Ex: gitcommit -m "alteração da linha 1"

git push local master

--------------------------------------------------------------
Para que a sicronização seja completa é preciso que o usuario secundário puxe as informações

Acessar a paasta do usuário secundário
cd /c/Users/REMAKKER/Desktop/projeto-git/beto/projeto

digitar ocomando
Ex:git pull local master

---------------------------------------------------------------------
Para identificar o branch (ramificação)

git branch

---------------------
Para criar uma nova branch (ramificação)
git branch nome do branch
Ex: git branch titulo

----

Para acessar o nome branch
git checkout nome do branch
Ex: git checkout titulo

----
Comando para criar um branch e já entrar nele
git checkout -b nome do branch
Ex: git checkout -b lista

-----

Comando para unificar as branch
Dentro da ramificação master
Ex:/C/users/remakker/desktop/projeto-git/marcos

Digitar o comando abaixo
git merge nome da ramificação
git merge titulo

Observação: desta forma é unificado porém é gerado um commit de merge
----
Comando para unificar as branch sem gera um commit de merge
Dentro da ramificação master
Ex:/C/users/remakker/desktop/projeto-git/marcos

Digitar o comando abaixo
git rebase nome da ramificação
git rebase titulo

-----

para desfazer alterações em arquivos antes de adicionar o add
git checkout -- nome do arquivo
Ex: git checkout -- index.html

----

para desfazer alterações em arquivos que já foram marcados para commitar
git reset HEAD nome do arquivo
Ex: git reset HEAD index.html

Após desfazer a marcação para comitar, utilizar o código abaixo
para desfazer altrações em arquivos antes de adicionar o add
git checkout -- nome do arquivo
Ex: git checkout -- index.html

----
Para desfazer um commit é preciso

identificar o hash do commit
EX: git log
commit da655db888b05cbefa186ad2704d86b2fce2af05 (HEAD -> master, local/master, titulo)
Author: marcosfn <marcoshefa@gmail.com>
Date:   Thu Mar 3 20:57:13 2022 -0300

copiar a identificcção hash do commit "da655db888b05cbefa186ad2704d86b2fce2af05"

e digitar o comando abaixo

git revert da655db888b05cbefa186ad2704d86b2fce2af05

-----
Listar as alterações dos arquivos temporariamente
git stash list

-----
puxar a ultima alteração do arquivo temporario e retirar da lista
Git stash pop

preparar o aquivo para o commit
git add index.html

Commitar
git commit - "alteração "

Enviar para master
git push local master

-----
Navegar entre os commits
git checkout hash do commit
Ex: git commit 4j6lkj

------

Para visualizar todos os commits
git log --oneline

------
Ver o que foi alterado commit por commit
git log -p

------

ver as alterações entre determinados commit
git diff hash mais antiga..hash mais recente
ex: git hash uik4o4j4..3ki459

-------
se estiver trabalhando em um arquivo e não estiver adicionado o arquivo para comitar o comendo diff trará todas as alterações dos documentos.

------

Criando uma tag

git tag -a v0.1.1 -m "Lançando a primeira versão beta"

-------
Comando para visualizar tag
gita tag

-------
comando para trocar de branches
git swicth nome da branch


----
Para sair da tela do vim
ESC:wq

extensão do chrome
octotree

----
alterar a mensagem de commit
git commit --amend


ssh-keygen -t rsa -b 4096 -C "marcoshefa@gmail.com"
-----
